@{
ViewData["Title"] = "Home Page";
}
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger">
        @TempData["ErrorMessage"]
    </div>
}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Statistieken</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    body {
      font-family: sans-serif;
      margin: 0;
      padding: 0;
      background: #f5f5f5;
    }

    h1 {
      text-align: center;
      padding: 20px;
    }

    .chart-container {
      display: flex;
      justify-content: space-around;
      align-items: flex-start;
      flex-wrap: wrap;
      gap: 20px;
      padding: 20px;
    }

    .chart-box {
      flex: 1 1 400px;
      max-width: 500px;
      background: white;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .info-box {
      flex: 1 1 400px;
      margin: 13px;
      max-width: 500px;
      background: white;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
      font-size: 18px;
    }

    canvas {
      width: 100% !important;
      height: auto !important;
    }

    strong {
      color: #333;
    }
  </style>
</head>
<body>

<h1>Matrix Inc. Dashboard</h1>

<div class="chart-container">
  <div class="chart-box">
    <h2>Orders per month</h2>
    <canvas id="ordersChart"></canvas>
  </div>

  <div class="info-container">
    <div class="info-box">
      <h2>Active Customers</h2>
      <p id="activeUsersText">...</p>
    </div>

    <div class="info-box">
      <h2>Active Discounts</h2>
      <p id="activeDiscountText">...</p>
    </div>
  </div>
</div>

<script>
  async function LoadOrdersPerMonth() {
    const response = await fetch("/api/stats/orders-per-month");
    const data = await response.json();

    const labels = data.map(item => {
      const date = new Date(item.year, item.month - 1);
      return date.toLocaleString("en-EN", { month: "long", year: "numeric" });
    });

    const counts = data.map(item => item.count);

    new Chart(document.getElementById("ordersChart"), {
      type: "line",
      data: {
        labels: labels,
        datasets: [{
          label: "Order amount",
          data: counts,
          fill: false,
          borderColor: "blue",
          tension: 0.3
        }]
      }
    });
  }

  async function LoadActiveUsersCount() {
    const response = await fetch('/api/stats/active-users');
    const data = await response.json();
    const count = data.length;

    const text = count === 1
      ? `Currently there is <strong>1</strong> active customer.`
      : `Currently there are <strong>${count}</strong> active customers.`;

    document.getElementById('activeUsersText').innerHTML = text;
  }

  async function LoadActiveDiscountCount() {
    const response = await fetch('/api/stats/check-discount');
    const data = await response.json();
    const discounted = data.products.filter(p => p.hasDiscount === true);
    const count = discounted.length;

    const text = count === 1
      ? `Currently there is <strong>1</strong> product with an active discount.`
      : `Currently there are <strong>${count}</strong> products with an active discount.`;

    document.getElementById('activeDiscountText').innerHTML = text;
  }

  LoadOrdersPerMonth();
  LoadActiveUsersCount();
  LoadActiveDiscountCount();
</script>

</body>
</html>